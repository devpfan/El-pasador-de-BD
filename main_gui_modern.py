"""
Modern GUI - Interfaz gr√°fica moderna usando CustomTkinter
Versi√≥n modernizada con apariencia profesional y temas dark/light
"""

import customtkinter as ctk
from tkinter import messagebox, filedialog
import tkinter as tk
import logging
import threading
import json
from typing import Dict, List, Optional, Any
from datetime import datetime
import os
from pathlib import Path

from database_manager import DatabaseManager
from schema_analyzer import SchemaAnalyzer, SchemaInfo
from dependency_resolver import DependencyResolver
from schema_exporter import SchemaExporter

# Configurar CustomTkinter
ctk.set_appearance_mode("system")  # system, light, dark
ctk.set_default_color_theme("blue")  # blue, green, dark-blue


class ModernConnectionFrame(ctk.CTkFrame):
    """Frame moderno para configuraci√≥n de conexiones de BD"""
    
    def __init__(self, parent, title: str, connection_type: str):
        super().__init__(parent)
        
        self.connection_type = connection_type
        self.connection_config = {}
        
        # T√≠tulo con icono
        title_frame = ctk.CTkFrame(self)
        title_frame.pack(fill='x', padx=10, pady=(10, 5))
        
        icon = "üóÑÔ∏è" if connection_type == "source" else "üìä"
        title_label = ctk.CTkLabel(
            title_frame, 
            text=f"{icon} {title}", 
            font=ctk.CTkFont(size=16, weight="bold")
        )
        title_label.pack(pady=10)
        
        # Frame principal de contenido
        content_frame = ctk.CTkFrame(self)
        content_frame.pack(fill='both', expand=True, padx=10, pady=(0, 10))
        
        self.setup_connection_ui(content_frame)
        
    def setup_connection_ui(self, parent):
        """Configura la interfaz de conexi√≥n moderna"""
        
        # Tipo de BD
        db_type_frame = ctk.CTkFrame(parent)
        db_type_frame.pack(fill='x', padx=15, pady=(15, 10))
        
        ctk.CTkLabel(
            db_type_frame, 
            text="Tipo de Base de Datos:",
            font=ctk.CTkFont(size=12, weight="bold")
        ).pack(anchor='w', padx=10, pady=(10, 5))
        
        self.db_type_var = ctk.StringVar(value="oracle")
        
        # Botones de tipo de BD modernos
        db_buttons_frame = ctk.CTkFrame(db_type_frame)
        db_buttons_frame.pack(fill='x', padx=10, pady=(0, 10))
        
        db_types = [
            ("üî∂ Oracle", "oracle"),
            ("üêò PostgreSQL", "postgresql"),
            ("üê¨ MySQL", "mysql"),
            ("üè¢ SQL Server", "sqlserver"),
            ("üìÅ SQLite", "sqlite")
        ]
        
        for i, (text, value) in enumerate(db_types):
            btn = ctk.CTkRadioButton(
                db_buttons_frame,
                text=text,
                variable=self.db_type_var,
                value=value,
                command=self.on_db_type_change
            )
            btn.grid(row=0, column=i, padx=5, pady=5, sticky='w')
        
        # Configurar grid
        db_buttons_frame.grid_columnconfigure(tuple(range(5)), weight=1)
        
        # Campos de conexi√≥n
        fields_frame = ctk.CTkFrame(parent)
        fields_frame.pack(fill='x', padx=15, pady=(0, 10))
        
        ctk.CTkLabel(
            fields_frame,
            text="Par√°metros de Conexi√≥n:",
            font=ctk.CTkFont(size=12, weight="bold")
        ).pack(anchor='w', padx=10, pady=(10, 5))
        
        # Grid para campos
        self.fields_container = ctk.CTkFrame(fields_frame)
        self.fields_container.pack(fill='x', padx=10, pady=(0, 10))
        
        # Crear campos de entrada modernos
        self.create_connection_fields()
        
        # Botones de acci√≥n
        buttons_frame = ctk.CTkFrame(parent)
        buttons_frame.pack(fill='x', padx=15, pady=(0, 15))
        
        self.test_btn = ctk.CTkButton(
            buttons_frame,
            text="üîç Probar Conexi√≥n",
            command=self.test_connection,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold")
        )
        self.test_btn.pack(side='left', padx=(10, 5), pady=10)
        
        self.connect_btn = ctk.CTkButton(
            buttons_frame,
            text="üîó Conectar",
            command=self.connect,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold")
        )
        self.connect_btn.pack(side='left', padx=5, pady=10)
        
        # Lista de esquemas
        schemas_frame = ctk.CTkFrame(parent)
        schemas_frame.pack(fill='both', expand=True, padx=15, pady=(0, 15))
        
        ctk.CTkLabel(
            schemas_frame,
            text="üìã Esquemas Disponibles:",
            font=ctk.CTkFont(size=12, weight="bold")
        ).pack(anchor='w', padx=10, pady=(10, 5))
        
        # Scrollable frame para esquemas
        self.schemas_scroll = ctk.CTkScrollableFrame(schemas_frame, height=200)
        self.schemas_scroll.pack(fill='both', expand=True, padx=10, pady=(0, 10))
        
        # Variable para esquema seleccionado
        self.selected_schema_var = ctk.StringVar()
        self.schema_buttons = []
        
    def create_connection_fields(self):
        """Crea los campos de conexi√≥n modernos"""
        
        # Limpiar campos existentes
        for widget in self.fields_container.winfo_children():
            widget.destroy()
        
        self.entries = {}
        
        # Campos seg√∫n el tipo de BD
        db_type = self.db_type_var.get()
        
        if db_type == "sqlite":
            fields = [("üìÅ Archivo de BD", "database", True)]
        else:
            fields = [
                ("üåê Servidor", "host", False),
                ("üîå Puerto", "port", False),
                ("üóÑÔ∏è Base de Datos", "database", False),
                ("üë§ Usuario", "user", False),
                ("üîí Contrase√±a", "password", True)
            ]
        
        # Crear campos en grid
        for i, (label_text, field_name, is_password) in enumerate(fields):
            # Label
            label = ctk.CTkLabel(
                self.fields_container,
                text=label_text,
                font=ctk.CTkFont(size=11)
            )
            label.grid(row=i, column=0, sticky='w', padx=(10, 5), pady=5)
            
            # Entry
            if is_password and field_name == "password":
                entry = ctk.CTkEntry(
                    self.fields_container,
                    show="*",
                    height=30
                )
            elif field_name == "database" and db_type == "sqlite":
                # Frame para SQLite con bot√≥n browse
                sqlite_frame = ctk.CTkFrame(self.fields_container)
                sqlite_frame.grid(row=i, column=1, sticky='ew', padx=5, pady=5)
                
                entry = ctk.CTkEntry(sqlite_frame, height=30)
                entry.pack(side='left', fill='x', expand=True, padx=(0, 5))
                
                browse_btn = ctk.CTkButton(
                    sqlite_frame,
                    text="üìÇ",
                    width=40,
                    height=30,
                    command=lambda: self.browse_sqlite_file(entry)
                )
                browse_btn.pack(side='right')
            else:
                entry = ctk.CTkEntry(
                    self.fields_container,
                    height=30
                )
                entry.grid(row=i, column=1, sticky='ew', padx=5, pady=5)
            
            # Valores por defecto
            default_values = {
                "oracle": {"host": "localhost", "port": "1521"},
                "postgresql": {"host": "localhost", "port": "5432"},
                "mysql": {"host": "localhost", "port": "3306"},
                "sqlserver": {"host": "localhost", "port": "1433"}
            }
            
            if db_type in default_values and field_name in default_values[db_type]:
                entry.insert(0, default_values[db_type][field_name])
            
            self.entries[field_name] = entry
        
        # Configurar grid weights
        self.fields_container.grid_columnconfigure(1, weight=1)
    
    def browse_sqlite_file(self, entry):
        """Abre di√°logo para seleccionar archivo SQLite"""
        filename = filedialog.askopenfilename(
            title="Seleccionar archivo SQLite",
            filetypes=[("SQLite files", "*.db *.sqlite *.sqlite3"), ("All files", "*.*")]
        )
        if filename:
            entry.delete(0, 'end')
            entry.insert(0, filename)
    
    def on_db_type_change(self):
        """Maneja cambio de tipo de BD"""
        self.create_connection_fields()
    
    def test_connection(self):
        """Prueba la conexi√≥n a la BD"""
        try:
            config = self.get_connection_config()
            if not config:
                return
            
            # Cambiar bot√≥n mientras prueba
            self.test_btn.configure(text="‚è≥ Probando...", state="disabled")
            
            def test_thread():
                try:
                    from database_manager import DatabaseManager
                    db_manager = DatabaseManager()
                    engine = db_manager.get_engine("test", config['db_type'], config)
                    
                    # Probar conexi√≥n
                    with engine.connect() as conn:
                        from sqlalchemy import text
                        conn.execute(text("SELECT 1"))
                    
                    # Actualizar UI en hilo principal
                    self.after(0, lambda: self.on_test_success())
                    
                except Exception as e:
                    self.after(0, lambda: self.on_test_error(str(e)))
            
            threading.Thread(target=test_thread, daemon=True).start()
            
        except Exception as e:
            self.on_test_error(str(e))
    
    def on_test_success(self):
        """Maneja prueba de conexi√≥n exitosa"""
        self.test_btn.configure(text="‚úÖ Conexi√≥n OK", fg_color="green")
        
        # Restaurar bot√≥n despu√©s de un delay
        def restore_button():
            self.test_btn.configure(
                text="üîç Probar Conexi√≥n", 
                state="normal",
                fg_color=None  # Usar color por defecto
            )
        
        self.after(2000, restore_button)
        messagebox.showinfo("Conexi√≥n Exitosa", "La conexi√≥n se estableci√≥ correctamente")
    
    def on_test_error(self, error):
        """Maneja error en prueba de conexi√≥n"""
        self.test_btn.configure(text="‚ùå Error", fg_color="red", state="normal")
        
        # Restaurar bot√≥n despu√©s de un delay
        def restore_button():
            self.test_btn.configure(
                text="üîç Probar Conexi√≥n",
                fg_color=None  # Usar color por defecto
            )
        
        self.after(2000, restore_button)
        messagebox.showerror("Error de Conexi√≥n", f"No se pudo conectar:\n{error}")
    
    def connect(self):
        """Establece conexi√≥n y carga esquemas"""
        try:
            config = self.get_connection_config()
            if not config:
                return
            
            self.connection_config = config
            
            # Cambiar bot√≥n mientras conecta
            self.connect_btn.configure(text="‚è≥ Conectando...", state="disabled")
            
            def connect_thread():
                try:
                    from database_manager import DatabaseManager
                    db_manager = DatabaseManager()
                    engine = db_manager.get_engine(self.connection_type, config['db_type'], config)
                    
                    # Obtener esquemas
                    schemas = db_manager.get_schemas(engine, config['db_type'])
                    
                    # Actualizar UI en hilo principal
                    self.after(0, lambda: self.on_connect_success(schemas))
                    
                except Exception as e:
                    self.after(0, lambda: self.on_connect_error(str(e)))
            
            threading.Thread(target=connect_thread, daemon=True).start()
            
        except Exception as e:
            self.on_connect_error(str(e))
    
    def on_connect_success(self, schemas):
        """Maneja conexi√≥n exitosa y carga esquemas"""
        self.connect_btn.configure(text="‚úÖ Conectado", fg_color="green", state="normal")
        
        # Limpiar esquemas anteriores
        for btn in self.schema_buttons:
            btn.destroy()
        self.schema_buttons.clear()
        
        # Agregar nuevos esquemas como botones radio modernos
        if schemas:
            for schema in sorted(schemas):
                btn = ctk.CTkRadioButton(
                    self.schemas_scroll,
                    text=f"üìã {schema}",
                    variable=self.selected_schema_var,
                    value=schema,
                    font=ctk.CTkFont(size=11)
                )
                btn.pack(anchor='w', padx=10, pady=2)
                self.schema_buttons.append(btn)
        else:
            no_schemas_label = ctk.CTkLabel(
                self.schemas_scroll,
                text="‚ùå No se encontraron esquemas accesibles",
                font=ctk.CTkFont(size=11),
                text_color="gray"
            )
            no_schemas_label.pack(padx=10, pady=10)
    
    def on_connect_error(self, error):
        """Maneja error de conexi√≥n"""
        self.connect_btn.configure(text="‚ùå Error", fg_color="red", state="normal")
        
        # Restaurar bot√≥n despu√©s de un delay
        def restore_button():
            self.connect_btn.configure(
                text="üîó Conectar",
                fg_color=None  # Usar color por defecto
            )
        
        self.after(3000, restore_button)
        messagebox.showerror("Error de Conexi√≥n", f"No se pudo conectar:\n{error}")
    
    def get_connection_config(self) -> Optional[Dict]:
        """Obtiene configuraci√≥n de conexi√≥n desde el formulario"""
        db_type = self.db_type_var.get()
        
        config = {"db_type": db_type}
        
        for field_name, entry in self.entries.items():
            value = entry.get().strip()
            if not value and field_name != "password":
                messagebox.showerror("Campo Requerido", f"El campo {field_name} es requerido")
                return None
            config[field_name] = value
        
        return config
    
    def get_selected_schema(self) -> Optional[str]:
        """Obtiene el esquema seleccionado"""
        return self.selected_schema_var.get() or None


class ModernSchemaVisualizationFrame(ctk.CTkFrame):
    """Frame moderno para visualizaci√≥n de esquemas"""
    
    def __init__(self, parent):
        super().__init__(parent)
        
        self.schema_info = None
        
        # Configurar UI
        self.setup_ui()
        
        # Dependency resolver
        from dependency_resolver import DependencyResolver
        self.dependency_resolver = DependencyResolver()
    
    def setup_ui(self):
        """Configura la interfaz moderna de visualizaci√≥n"""
        
        # T√≠tulo
        title_label = ctk.CTkLabel(
            self,
            text="üìä An√°lisis de Esquema",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        title_label.pack(pady=(10, 20))
        
        # Tabview moderno para diferentes vistas
        self.tabview = ctk.CTkTabview(self, width=400, height=300)
        self.tabview.pack(fill='both', expand=True, padx=10, pady=(0, 10))
        
        # Pesta√±as modernas
        self.tabview.add("üìà Resumen")
        self.tabview.add("üîó Dependencias") 
        self.tabview.add("üìã Orden")
        self.tabview.add("üóÇÔ∏è Objetos")
        self.tabview.add("‚ö†Ô∏è Problemas")
        
        self.setup_summary_tab()
        self.setup_dependencies_tab()
        self.setup_order_tab()
        self.setup_objects_tab()
        self.setup_problems_tab()
    
    def setup_summary_tab(self):
        """Configura pesta√±a de resumen moderna"""
        tab = self.tabview.tab("üìà Resumen")
        
        # Frame de estad√≠sticas
        stats_frame = ctk.CTkFrame(tab)
        stats_frame.pack(fill='x', padx=10, pady=10)
        
        self.stats_label = ctk.CTkLabel(
            stats_frame,
            text="üí§ Analiza un esquema para ver estad√≠sticas",
            font=ctk.CTkFont(size=12),
            justify="left"
        )
        self.stats_label.pack(padx=20, pady=20)
        
        # Frame de tablas con scrollbar moderno
        tables_frame = ctk.CTkFrame(tab)
        tables_frame.pack(fill='both', expand=True, padx=10, pady=(0, 10))
        
        ctk.CTkLabel(
            tables_frame,
            text="üìä Tablas del Esquema",
            font=ctk.CTkFont(size=14, weight="bold")
        ).pack(pady=(10, 5))
        
        # Crear textbox scrollable para tablas
        self.tables_textbox = ctk.CTkTextbox(tables_frame, height=200)
        self.tables_textbox.pack(fill='both', expand=True, padx=10, pady=(0, 10))
    
    def setup_dependencies_tab(self):
        """Configura pesta√±a de dependencias moderna"""
        tab = self.tabview.tab("üîó Dependencias")
        
        # Frame de √°rbol de dependencias
        tree_frame = ctk.CTkFrame(tab)
        tree_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        ctk.CTkLabel(
            tree_frame,
            text="üå≥ √Årbol de Dependencias",
            font=ctk.CTkFont(size=14, weight="bold")
        ).pack(pady=(10, 5))
        
        self.deps_textbox = ctk.CTkTextbox(tree_frame)
        self.deps_textbox.pack(fill='both', expand=True, padx=10, pady=(0, 10))
    
    def setup_order_tab(self):
        """Configura pesta√±a de orden moderna"""
        tab = self.tabview.tab("üìã Orden")
        
        order_frame = ctk.CTkFrame(tab)
        order_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        ctk.CTkLabel(
            order_frame,
            text="üéØ Orden de Transferencia",
            font=ctk.CTkFont(size=14, weight="bold")
        ).pack(pady=(10, 5))
        
        self.order_textbox = ctk.CTkTextbox(order_frame)
        self.order_textbox.pack(fill='both', expand=True, padx=10, pady=(0, 10))
    
    def setup_objects_tab(self):
        """Configura pesta√±a de objetos moderna"""
        tab = self.tabview.tab("üóÇÔ∏è Objetos")
        
        # Sub-tabview para tipos de objetos
        self.objects_tabview = ctk.CTkTabview(tab, width=300, height=250)
        self.objects_tabview.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Sub-pesta√±as para cada tipo
        object_types = [
            ("üìä Tablas", "tables"),
            ("üëÅ Vistas", "views"), 
            ("üî¢ Secuencias", "sequences"),
            ("‚öôÔ∏è Procedimientos", "procedures"),
            ("üéØ Triggers", "triggers"),
            ("üìá √çndices", "indexes")
        ]
        
        self.object_textboxes = {}
        
        for tab_name, obj_type in object_types:
            self.objects_tabview.add(tab_name)
            
            textbox = ctk.CTkTextbox(self.objects_tabview.tab(tab_name))
            textbox.pack(fill='both', expand=True, padx=5, pady=5)
            
            self.object_textboxes[obj_type] = textbox
    
    def setup_problems_tab(self):
        """Configura pesta√±a de problemas moderna"""
        tab = self.tabview.tab("‚ö†Ô∏è Problemas")
        
        problems_frame = ctk.CTkFrame(tab)
        problems_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        ctk.CTkLabel(
            problems_frame,
            text="üîç Problemas Detectados",
            font=ctk.CTkFont(size=14, weight="bold")
        ).pack(pady=(10, 5))
        
        self.problems_textbox = ctk.CTkTextbox(problems_frame)
        self.problems_textbox.pack(fill='both', expand=True, padx=10, pady=(0, 10))
    
    def update_schema_info(self, schema_info: SchemaInfo):
        """Actualiza la visualizaci√≥n con nueva informaci√≥n del esquema"""
        self.schema_info = schema_info
        
        self.update_summary_tab()
        self.update_dependencies_tab()
        self.update_order_tab()
        self.update_objects_tab()
        self.update_problems_tab()
    
    def update_summary_tab(self):
        """Actualiza pesta√±a de resumen"""
        if not self.schema_info:
            return
        
        # Estad√≠sticas modernas con iconos
        stats_text = f"""üéØ ESQUEMA: {self.schema_info.schema_name}

üìä OBJETOS:
   üìã Tablas: {len(self.schema_info.objects.tables)}
   üëÅ Vistas: {len(self.schema_info.objects.views)}  
   üî¢ Secuencias: {len(self.schema_info.objects.sequences)}
   ‚öôÔ∏è Procedimientos: {len(self.schema_info.objects.procedures)}
   üéØ Triggers: {len(self.schema_info.objects.triggers)}
   üìá √çndices: {len(self.schema_info.objects.indexes)}

üíæ DATOS:
   üìä Filas totales: {sum(t.row_count for t in self.schema_info.objects.tables.values()):,}
   üîó Llaves for√°neas: {sum(len(t.foreign_keys) for t in self.schema_info.objects.tables.values())}
   üìö Niveles dependencia: {len(set(self.dependency_resolver.create_dependency_graph(self.schema_info).levels.values()))}"""
        
        self.stats_label.configure(text=stats_text)
        
        # Lista de tablas
        self.tables_textbox.delete("0.0", "end")
        
        if self.schema_info.objects.tables:
            tables_info = "TABLA                      FILAS      COLS  FKs  DEPS\n"
            tables_info += "‚îÄ" * 55 + "\n"
            
            for name, table in self.schema_info.objects.tables.items():
                tables_info += f"{name:<25} {table.row_count:>8,} {len(table.columns):>4} {len(table.foreign_keys):>3} {len(table.dependencies):>4}\n"
        else:
            tables_info = "‚ùå No se encontraron tablas en el esquema"
        
        self.tables_textbox.insert("0.0", tables_info)
    
    def update_dependencies_tab(self):
        """Actualiza pesta√±a de dependencias"""
        if not self.schema_info:
            return
        
        self.deps_textbox.delete("0.0", "end")
        
        try:
            # Crear grafo de dependencias
            dep_graph = self.dependency_resolver.create_dependency_graph(self.schema_info)
            
            deps_text = "üå≥ √ÅRBOL DE DEPENDENCIAS\n"
            deps_text += "‚ïê" * 40 + "\n\n"
            
            # Mostrar por niveles
            for level in sorted(set(dep_graph.levels.values())):
                tables_in_level = [name for name, lvl in dep_graph.levels.items() if lvl == level]
                if tables_in_level:
                    deps_text += f"üìä NIVEL {level}:\n"
                    for table in sorted(tables_in_level):
                        deps_text += f"   ‚îî‚îÄ {table}\n"
                    deps_text += "\n"
            
            # Mostrar ciclos si existen
            if dep_graph.cycles:
                deps_text += "‚ö†Ô∏è  CICLOS DETECTADOS:\n"
                for i, cycle in enumerate(dep_graph.cycles, 1):
                    deps_text += f"   üîÑ Ciclo {i}: {' ‚Üí '.join(cycle)}\n"
            
        except Exception as e:
            deps_text = f"‚ùå Error generando √°rbol de dependencias:\n{str(e)}"
        
        self.deps_textbox.insert("0.0", deps_text)
    
    def update_order_tab(self):
        """Actualiza pesta√±a de orden"""
        if not self.schema_info:
            return
        
        self.order_textbox.delete("0.0", "end")
        
        order_text = "üéØ ORDEN DE TRANSFERENCIA\n"
        order_text += "‚ïê" * 40 + "\n\n"
        
        for i, table_name in enumerate(self.schema_info.dependency_order, 1):
            if table_name in self.schema_info.objects.tables:
                table_info = self.schema_info.objects.tables[table_name]
                order_text += f"{i:>3}. üìã {table_name:<25} ({table_info.row_count:,} filas)\n"
        
        self.order_textbox.insert("0.0", order_text)
    
    def update_objects_tab(self):
        """Actualiza pesta√±a de objetos"""
        if not self.schema_info:
            return
        
        # Tablas
        tables_text = "üìä TABLAS\n" + "‚ïê" * 30 + "\n\n"
        for name, table in self.schema_info.objects.tables.items():
            tables_text += f"üìã {name}\n"
            tables_text += f"   üìä Filas: {table.row_count:,}\n"
            tables_text += f"   üìÑ Columnas: {len(table.columns)}\n"
            tables_text += f"   üîó FKs: {len(table.foreign_keys)}\n"
            tables_text += f"   üìö Deps: {len(table.dependencies)}\n\n"
        
        self.object_textboxes["tables"].delete("0.0", "end")
        self.object_textboxes["tables"].insert("0.0", tables_text)
        
        # Vistas
        views_text = "üëÅ VISTAS\n" + "‚ïê" * 30 + "\n\n"
        for name, view in self.schema_info.objects.views.items():
            views_text += f"üëÅ {name}\n"
            views_text += f"   ‚úèÔ∏è  Actualizable: {'S√≠' if view.is_updatable else 'No'}\n"
            views_text += f"   üìÑ Columnas: {len(view.columns)}\n"
            views_text += f"   üìö Deps: {len(view.dependencies)}\n\n"
        
        self.object_textboxes["views"].delete("0.0", "end")
        self.object_textboxes["views"].insert("0.0", views_text)
        
        # Secuencias
        sequences_text = "üî¢ SECUENCIAS\n" + "‚ïê" * 30 + "\n\n"
        for name, seq in self.schema_info.objects.sequences.items():
            sequences_text += f"üî¢ {name}\n"
            sequences_text += f"   üéØ Inicio: {seq.start_value}\n"
            sequences_text += f"   ‚¨ÜÔ∏è  Incremento: {seq.increment_by}\n"
            sequences_text += f"   üîÑ Ciclo: {'S√≠' if seq.cycle_flag else 'No'}\n\n"
        
        self.object_textboxes["sequences"].delete("0.0", "end")
        self.object_textboxes["sequences"].insert("0.0", sequences_text)
        
        # Procedimientos
        procedures_text = "‚öôÔ∏è PROCEDIMIENTOS\n" + "‚ïê" * 30 + "\n\n"
        for name, proc in self.schema_info.objects.procedures.items():
            procedures_text += f"‚öôÔ∏è {name}\n"
            procedures_text += f"   üè∑Ô∏è  Tipo: {proc.procedure_type}\n"
            procedures_text += f"   üó£Ô∏è  Lenguaje: {proc.language}\n"
            procedures_text += f"   üìã Par√°metros: {len(proc.parameters)}\n\n"
        
        self.object_textboxes["procedures"].delete("0.0", "end")
        self.object_textboxes["procedures"].insert("0.0", procedures_text)
        
        # Triggers
        triggers_text = "üéØ TRIGGERS\n" + "‚ïê" * 30 + "\n\n"
        for name, trigger in self.schema_info.objects.triggers.items():
            triggers_text += f"üéØ {name}\n"
            triggers_text += f"   üìã Tabla: {trigger.table_name}\n"
            triggers_text += f"   üè∑Ô∏è  Tipo: {trigger.trigger_type}\n"
            triggers_text += f"   ‚ö° Evento: {trigger.triggering_event}\n"
            triggers_text += f"   üîò Estado: {trigger.status}\n\n"
        
        self.object_textboxes["triggers"].delete("0.0", "end")
        self.object_textboxes["triggers"].insert("0.0", triggers_text)
        
        # √çndices
        indexes_text = "üìá √çNDICES\n" + "‚ïê" * 30 + "\n\n"
        for name, index in self.schema_info.objects.indexes.items():
            if not self._is_system_index(index):
                indexes_text += f"üìá {name}\n"
                indexes_text += f"   üìã Tabla: {index.table_name}\n"
                indexes_text += f"   üè∑Ô∏è  Tipo: {index.index_type}\n"
                indexes_text += f"   üîí √önico: {'S√≠' if index.is_unique else 'No'}\n"
                indexes_text += f"   üìÑ Columnas: {', '.join(index.columns)}\n\n"
        
        self.object_textboxes["indexes"].delete("0.0", "end")
        self.object_textboxes["indexes"].insert("0.0", indexes_text)
    
    def update_problems_tab(self):
        """Actualiza pesta√±a de problemas"""
        if not self.schema_info:
            return
        
        self.problems_textbox.delete("0.0", "end")
        
        # Validar integridad del esquema
        from schema_analyzer import SchemaAnalyzer
        analyzer = SchemaAnalyzer(None)
        issues = analyzer.validate_schema_integrity(self.schema_info)
        
        problems_text = "üîç PROBLEMAS DETECTADOS\n"
        problems_text += "‚ïê" * 40 + "\n\n"
        
        if issues:
            for issue in issues:
                icon = "‚ö†Ô∏è" if issue["type"] == "no_primary_key" else "‚ùå"
                problems_text += f"{icon} {issue['type'].upper()}\n"
                problems_text += f"   üìã Tabla: {issue['table']}\n"
                problems_text += f"   üìù Descripci√≥n: {issue['description']}\n\n"
        else:
            problems_text += "‚úÖ No se detectaron problemas en el esquema\n"
            problems_text += "üéâ El esquema tiene una estructura v√°lida"
        
        self.problems_textbox.insert("0.0", problems_text)
    
    def _is_system_index(self, index_info) -> bool:
        """Determina si un √≠ndice es del sistema"""
        index_name = index_info.index_name.upper()
        return (index_name.startswith('PK_') or 
                index_name.startswith('FK_') or
                index_name.startswith('SYS_'))


class ModernMainGUI:
    """Ventana principal moderna de la aplicaci√≥n"""
    
    def __init__(self):
        # Crear ventana principal moderna
        self.root = ctk.CTk()
        self.root.title("üöÄ Pasador de Esquemas de BD - Versi√≥n Moderna")
        self.root.geometry("1400x900")
        
        # Configurar grid
        self.root.grid_rowconfigure(0, weight=1)
        self.root.grid_columnconfigure(0, weight=1)
        
        # Componentes del negocio
        self.db_manager = DatabaseManager()
        self.schema_analyzer = SchemaAnalyzer(self.db_manager)
        self.dependency_resolver = DependencyResolver()
        self.schema_exporter = SchemaExporter()
        
        # Variables de estado
        self.source_schema_info: Optional[SchemaInfo] = None
        
        # Configurar logging
        logging.basicConfig(level=logging.INFO)
        
        # Variables para opciones de an√°lisis (ANTES de configurar UI)
        self.include_views_var = ctk.BooleanVar(value=True)
        self.include_sequences_var = ctk.BooleanVar(value=True)
        self.include_procedures_var = ctk.BooleanVar(value=True)
        self.include_triggers_var = ctk.BooleanVar(value=True)
        self.include_indexes_var = ctk.BooleanVar(value=True)
        
        # Configurar interfaz
        self.setup_ui()
        self.setup_menu()
    
    def setup_ui(self):
        """Configura la interfaz moderna"""
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.root)
        main_frame.grid(row=0, column=0, sticky='nsew', padx=10, pady=10)
        main_frame.grid_rowconfigure(0, weight=1)
        main_frame.grid_columnconfigure(1, weight=2)
        
        # Panel izquierdo - Conexiones y controles
        left_panel = ctk.CTkFrame(main_frame)
        left_panel.grid(row=0, column=0, sticky='nsew', padx=(0, 10))
        left_panel.grid_rowconfigure(1, weight=1)
        
        # Panel derecho - Visualizaci√≥n
        right_panel = ctk.CTkFrame(main_frame)
        right_panel.grid(row=0, column=1, sticky='nsew')
        right_panel.grid_rowconfigure(0, weight=1)
        right_panel.grid_columnconfigure(0, weight=1)
        
        self.setup_left_panel(left_panel)
        self.setup_right_panel(right_panel)
    
    def setup_left_panel(self, parent):
        """Configura panel izquierdo moderno"""
        
        # Conexi√≥n origen
        self.source_frame = ModernConnectionFrame(parent, "Base de Datos Origen", "source")
        self.source_frame.grid(row=0, column=0, sticky='ew', pady=(0, 10))
        
        # Frame de an√°lisis y opciones
        analysis_frame = ctk.CTkFrame(parent)
        analysis_frame.grid(row=1, column=0, sticky='ew', pady=(0, 10))
        
        # T√≠tulo de an√°lisis
        ctk.CTkLabel(
            analysis_frame,
            text="üîç An√°lisis de Esquema",
            font=ctk.CTkFont(size=14, weight="bold")
        ).pack(pady=(15, 10))
        
        # Opciones de objetos a analizar
        options_frame = ctk.CTkFrame(analysis_frame)
        options_frame.pack(fill='x', padx=15, pady=(0, 10))
        
        ctk.CTkLabel(
            options_frame,
            text="Objetos a Incluir:",
            font=ctk.CTkFont(size=12, weight="bold")
        ).pack(anchor='w', padx=10, pady=(10, 5))
        
        # Checkboxes modernos
        options = [
            ("üìä Tablas (siempre)", None, True, False),
            ("üëÅ Vistas", self.include_views_var, True, True),
            ("üî¢ Secuencias", self.include_sequences_var, True, True),
            ("‚öôÔ∏è Procedimientos", self.include_procedures_var, True, True), 
            ("üéØ Triggers", self.include_triggers_var, True, True),
            ("üìá √çndices", self.include_indexes_var, True, True)
        ]
        
        for text, var, default, enabled in options:
            if var:
                checkbox = ctk.CTkCheckBox(
                    options_frame,
                    text=text,
                    variable=var,
                    font=ctk.CTkFont(size=11)
                )
                if not enabled:
                    checkbox.configure(state="disabled")
            else:
                checkbox = ctk.CTkCheckBox(
                    options_frame,
                    text=text,
                    font=ctk.CTkFont(size=11),
                    state="disabled"
                )
                checkbox.select()  # Siempre seleccionado para tablas
            
            checkbox.pack(anchor='w', padx=15, pady=2)
        
        # Bot√≥n de an√°lisis moderno
        self.analyze_btn = ctk.CTkButton(
            analysis_frame,
            text="üöÄ Analizar Esquema",
            command=self.analyze_schema,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold")
        )
        self.analyze_btn.pack(fill='x', padx=15, pady=(10, 15))
        
        # Conexi√≥n destino
        self.target_frame = ModernConnectionFrame(parent, "Base de Datos Destino", "target")
        self.target_frame.grid(row=2, column=0, sticky='ew', pady=(0, 10))
        
        # Botones de acci√≥n modernos
        actions_frame = ctk.CTkFrame(parent)
        actions_frame.grid(row=3, column=0, sticky='ew')
        
        ctk.CTkLabel(
            actions_frame,
            text="üéØ Acciones",
            font=ctk.CTkFont(size=14, weight="bold")
        ).pack(pady=(15, 10))
        
        # Botones de transferencia y exportar
        buttons_frame = ctk.CTkFrame(actions_frame)
        buttons_frame.pack(fill='x', padx=15, pady=(0, 10))
        
        self.select_tables_btn = ctk.CTkButton(
            buttons_frame,
            text="üìã Seleccionar Tablas",
            command=self.select_tables,
            state="disabled",
            height=35
        )
        self.select_tables_btn.pack(fill='x', pady=2)
        
        self.transfer_btn = ctk.CTkButton(
            buttons_frame,
            text="üöÄ Iniciar Transferencia",
            command=self.start_transfer,
            state="disabled",
            height=35
        )
        self.transfer_btn.pack(fill='x', pady=2)
        
        self.export_btn = ctk.CTkButton(
            buttons_frame,
            text="üì§ Exportar Esquema",
            command=self.show_export_dialog,
            state="disabled",
            height=35
        )
        self.export_btn.pack(fill='x', pady=2)
        
        # Barra de progreso moderna
        self.progress_var = ctk.StringVar(value="üîÆ Listo para analizar esquema")
        self.progress_label = ctk.CTkLabel(actions_frame, textvariable=self.progress_var)
        self.progress_label.pack(padx=15, pady=(10, 5))
        
        self.progress_bar = ctk.CTkProgressBar(actions_frame)
        self.progress_bar.pack(fill='x', padx=15, pady=(0, 15))
        self.progress_bar.set(0)
    
    def setup_right_panel(self, parent):
        """Configura panel derecho moderno"""
        
        # Frame de visualizaci√≥n moderno
        self.viz_frame = ModernSchemaVisualizationFrame(parent)
        self.viz_frame.grid(row=0, column=0, sticky='nsew')
    
    def setup_menu(self):
        """Configura men√∫ moderno (usando tkinter tradicional para men√∫s)"""
        # CustomTkinter no tiene men√∫s nativos, usar tkinter
        menubar = tk.Menu(self.root)
        self.root.configure(menu=menubar)
        
        # Men√∫ Archivo
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="üìÅ Archivo", menu=file_menu)
        file_menu.add_command(label="üíæ Guardar Config", command=self.save_config)
        file_menu.add_command(label="üìÇ Cargar Config", command=self.load_config)
        file_menu.add_separator()
        file_menu.add_command(label="üî∂ Config Oracle", command=self.load_oracle_config)
        file_menu.add_separator()
        file_menu.add_command(label="üö™ Salir", command=self.root.quit)
        
        # Men√∫ Tema
        theme_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="üé® Tema", menu=theme_menu)
        theme_menu.add_command(label="üåô Modo Oscuro", command=lambda: self.change_theme("dark"))
        theme_menu.add_command(label="‚òÄÔ∏è Modo Claro", command=lambda: self.change_theme("light"))
        theme_menu.add_command(label="üíª Sistema", command=lambda: self.change_theme("system"))
        
        # Men√∫ Ayuda
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="‚ùì Ayuda", menu=help_menu)
        help_menu.add_command(label="üìñ Acerca de", command=self.show_about)
    
    def change_theme(self, theme: str):
        """Cambia el tema de la aplicaci√≥n"""
        ctk.set_appearance_mode(theme)
        messagebox.showinfo("Tema Cambiado", f"Tema cambiado a: {theme}")
    
    def show_about(self):
        """Muestra informaci√≥n sobre la aplicaci√≥n"""
        about_text = """üöÄ Pasador de Esquemas de BD - Versi√≥n Moderna

Una herramienta profesional para migraci√≥n de esquemas de bases de datos
con interfaz moderna usando CustomTkinter.

‚ú® Caracter√≠sticas:
‚Ä¢ Interfaz moderna con temas dark/light
‚Ä¢ Soporte para m√∫ltiples tipos de BD
‚Ä¢ An√°lisis completo de dependencias
‚Ä¢ Exportaci√≥n a m√∫ltiples formatos
‚Ä¢ Transferencia inteligente de datos

üîß Tecnolog√≠as:
‚Ä¢ Python 3.7+
‚Ä¢ CustomTkinter (GUI moderna)
‚Ä¢ SQLAlchemy (Abstracci√≥n de BD)
‚Ä¢ Pandas (Manipulaci√≥n de datos)

¬© 2025 - Herramienta de migraci√≥n de esquemas"""
        
        messagebox.showinfo("Acerca de", about_text)
    
    def analyze_schema(self):
        """Analiza el esquema seleccionado con interfaz moderna"""
        selected_schema = self.source_frame.get_selected_schema()
        if not selected_schema:
            messagebox.showerror("Error", "üîç Selecciona un esquema para analizar")
            return
        
        if not self.source_frame.connection_config:
            messagebox.showerror("Error", "üîå Conecta primero a la base de datos origen")
            return
        
        # Actualizar UI para mostrar progreso
        self.progress_var.set("üîç Analizando esquema...")
        self.progress_bar.start()
        self.analyze_btn.configure(text="‚è≥ Analizando...", state="disabled")
        
        def analyze_thread():
            try:
                config = self.source_frame.connection_config
                engine = self.db_manager.get_engine("source", config['db_type'], config)
                
                # Analizar esquema con opciones seleccionadas
                self.source_schema_info = self.schema_analyzer.analyze_schema(
                    engine, config['db_type'], selected_schema,
                    selected_tables=None,
                    include_views=self.include_views_var.get(),
                    include_procedures=self.include_procedures_var.get(),
                    include_sequences=self.include_sequences_var.get(),
                    include_triggers=self.include_triggers_var.get(),
                    include_indexes=self.include_indexes_var.get()
                )
                
                # Actualizar UI en hilo principal
                self.root.after(0, self.on_analysis_complete)
                
            except Exception as e:
                error_msg = f"Error analizando esquema: {str(e)}"
                self.root.after(0, lambda: self.on_analysis_error(error_msg))
        
        threading.Thread(target=analyze_thread, daemon=True).start()
    
    def on_analysis_complete(self):
        """Maneja la finalizaci√≥n del an√°lisis con estilo moderno"""
        self.progress_bar.stop()
        self.progress_bar.set(1.0)
        self.progress_var.set("‚úÖ An√°lisis completado")
        self.analyze_btn.configure(text="üöÄ Analizar Esquema", state="normal")
        
        if self.source_schema_info:
            # Actualizar visualizaci√≥n
            self.viz_frame.update_schema_info(self.source_schema_info)
            
            # Habilitar botones de acci√≥n
            self.select_tables_btn.configure(state="normal")
            self.transfer_btn.configure(state="normal") 
            self.export_btn.configure(state="normal")
            
            # Mostrar resumen moderno
            total_objects = (
                len(self.source_schema_info.objects.tables) +
                len(self.source_schema_info.objects.views) +
                len(self.source_schema_info.objects.sequences) +
                len(self.source_schema_info.objects.procedures) +
                len(self.source_schema_info.objects.triggers) +
                len(self.source_schema_info.objects.indexes)
            )
            
            total_rows = sum(t.row_count for t in self.source_schema_info.objects.tables.values())
            
            messagebox.showinfo("üéâ An√°lisis Completo", 
                              f"Esquema analizado exitosamente:\n\n"
                              f"üìä Objetos totales: {total_objects}\n"
                              f"üìã Tablas: {len(self.source_schema_info.objects.tables)}\n"
                              f"üíæ Filas totales: {total_rows:,}")
    
    def on_analysis_error(self, error_msg: str):
        """Maneja errores en el an√°lisis con estilo moderno"""
        self.progress_bar.stop()
        self.progress_bar.set(0)
        self.progress_var.set("‚ùå Error en an√°lisis")
        self.analyze_btn.configure(text="üöÄ Analizar Esquema", state="normal")
        messagebox.showerror("üí• Error de An√°lisis", error_msg)
    
    # M√©todos placeholder para funcionalidades existentes
    def select_tables(self):
        """Placeholder para selecci√≥n de tablas"""
        messagebox.showinfo("üöß En Desarrollo", 
                          "Funcionalidad de selecci√≥n de tablas\n"
                          "ser√° implementada pr√≥ximamente")
    
    def start_transfer(self):
        """Placeholder para transferencia"""
        messagebox.showinfo("üöß En Desarrollo",
                          "Funcionalidad de transferencia\n" 
                          "ser√° implementada pr√≥ximamente")
    
    def show_export_dialog(self):
        """Placeholder para di√°logo de exportar"""
        messagebox.showinfo("üöß En Desarrollo",
                          "Funcionalidad de exportaci√≥n\n"
                          "ser√° implementada pr√≥ximamente")
    
    def save_config(self):
        """Placeholder para guardar config"""
        messagebox.showinfo("üíæ Guardar Config", "Funcionalidad pr√≥ximamente")
    
    def load_config(self):
        """Placeholder para cargar config"""  
        messagebox.showinfo("üìÇ Cargar Config", "Funcionalidad pr√≥ximamente")
    
    def load_oracle_config(self):
        """Placeholder para config Oracle"""
        messagebox.showinfo("üî∂ Config Oracle", "Funcionalidad pr√≥ximamente")
    
    def run(self):
        """Ejecuta la aplicaci√≥n moderna"""
        try:
            self.root.mainloop()
        finally:
            # Limpiar recursos
            self.db_manager.close_all_connections()


# Alias para compatibilidad
MainGUI = ModernMainGUI


if __name__ == "__main__":
    app = ModernMainGUI()
    app.run()